//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/06_Input/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""FreeRoam"",
            ""id"": ""a5620fd8-9416-4bd8-86fd-9afd11d2097c"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""e16168cf-6648-419a-b7e5-b259e11c76f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Test"",
                    ""type"": ""Button"",
                    ""id"": ""d05ef3b2-8cab-4711-b65c-d483c71c2f83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PopUpMenu"",
                    ""type"": ""Button"",
                    ""id"": ""c92b22f8-642c-4bb5-9a72-7efcd752e6af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""a72cc657-18f5-4fa3-af30-cf6562492a78"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ItemPickUp"",
                    ""type"": ""Button"",
                    ""id"": ""8e85c95e-a8ec-4e54-9235-735fe33bdb29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""89e2dd36-b979-4a5c-bc39-0baf0b04fb0e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""560c13c8-04e9-49f8-82e0-d165f8412a01"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8ffc5b3c-89e0-4231-b711-003ac15c5ab5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fff4570f-55a0-426f-a5ab-b730d20c4f56"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3154e74e-8df1-415b-b0a8-18beb0aaf7fd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3ed57659-9915-4ae8-a3d8-675989e4b920"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""754cc968-c05b-433c-b7c8-a96e7b60f4e4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PopUpMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67141812-4f2a-498c-8861-871c788dbc9f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03c94c26-8ed6-4dd2-ad23-4fe1c881e2d3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ItemPickUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""battleMode"",
            ""id"": ""953cab16-633f-4c01-b002-511828d5d495"",
            ""actions"": [
                {
                    ""name"": ""PopUpMenu"",
                    ""type"": ""Button"",
                    ""id"": ""82ac095b-8849-47a5-8063-41e3f26bfb3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""68169848-48e5-4411-b1ac-ef7881fe5fb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Button"",
                    ""id"": ""c140dc25-3f1f-45e2-90a6-71802dd5aa09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8bcdce37-89e5-41d3-b57f-7f182ac9eb79"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PopUpMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""665c7b6d-7962-48a2-bffb-1bda9d38a47b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f297510c-707a-4293-a9e5-a4afefe84e66"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4f923431-24ed-4a2e-9699-dd92b671ad5a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e9439208-64a5-4f34-aec9-774c03e0ed03"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9edf63b1-2601-4672-9be3-a3b6ce0446b5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bf89c1f7-efe2-4ff3-ba44-e1fed580c099"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""popMenu"",
            ""id"": ""0bf2b5c9-995f-4306-9456-551888c95609"",
            ""actions"": [
                {
                    ""name"": ""MouseLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""843fc976-2e45-4802-910c-6e12b720712c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""43d4b27f-3dea-49a6-8b72-0e30c16c1ca8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""b41b3edd-5a91-45b3-a54d-6dd9435f73f5"",
            ""actions"": [
                {
                    ""name"": ""MouseLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""33fc325e-028f-4fc0-bf68-5a7461c9f914"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""96802cb6-0411-40ca-8a9c-a37ea0a05e98"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameResult"",
            ""id"": ""171ceb83-8a8e-4a6b-bece-04967c3cc6c5"",
            ""actions"": [
                {
                    ""name"": ""MouseLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""088346d6-5b11-4a0a-aef8-3bdae6636285"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""52fca4d4-acce-4af7-a533-15f7d561f21f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FreeRoam
        m_FreeRoam = asset.FindActionMap("FreeRoam", throwIfNotFound: true);
        m_FreeRoam_Movement = m_FreeRoam.FindAction("Movement", throwIfNotFound: true);
        m_FreeRoam_Test = m_FreeRoam.FindAction("Test", throwIfNotFound: true);
        m_FreeRoam_PopUpMenu = m_FreeRoam.FindAction("PopUpMenu", throwIfNotFound: true);
        m_FreeRoam_Click = m_FreeRoam.FindAction("Click", throwIfNotFound: true);
        m_FreeRoam_ItemPickUp = m_FreeRoam.FindAction("ItemPickUp", throwIfNotFound: true);
        // battleMode
        m_battleMode = asset.FindActionMap("battleMode", throwIfNotFound: true);
        m_battleMode_PopUpMenu = m_battleMode.FindAction("PopUpMenu", throwIfNotFound: true);
        m_battleMode_MouseLeftClick = m_battleMode.FindAction("MouseLeftClick", throwIfNotFound: true);
        m_battleMode_Movement = m_battleMode.FindAction("Movement", throwIfNotFound: true);
        // popMenu
        m_popMenu = asset.FindActionMap("popMenu", throwIfNotFound: true);
        m_popMenu_MouseLeftClick = m_popMenu.FindAction("MouseLeftClick", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_MouseLeftClick = m_Menu.FindAction("MouseLeftClick", throwIfNotFound: true);
        // GameResult
        m_GameResult = asset.FindActionMap("GameResult", throwIfNotFound: true);
        m_GameResult_MouseLeftClick = m_GameResult.FindAction("MouseLeftClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FreeRoam
    private readonly InputActionMap m_FreeRoam;
    private List<IFreeRoamActions> m_FreeRoamActionsCallbackInterfaces = new List<IFreeRoamActions>();
    private readonly InputAction m_FreeRoam_Movement;
    private readonly InputAction m_FreeRoam_Test;
    private readonly InputAction m_FreeRoam_PopUpMenu;
    private readonly InputAction m_FreeRoam_Click;
    private readonly InputAction m_FreeRoam_ItemPickUp;
    public struct FreeRoamActions
    {
        private @PlayerInputAction m_Wrapper;
        public FreeRoamActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_FreeRoam_Movement;
        public InputAction @Test => m_Wrapper.m_FreeRoam_Test;
        public InputAction @PopUpMenu => m_Wrapper.m_FreeRoam_PopUpMenu;
        public InputAction @Click => m_Wrapper.m_FreeRoam_Click;
        public InputAction @ItemPickUp => m_Wrapper.m_FreeRoam_ItemPickUp;
        public InputActionMap Get() { return m_Wrapper.m_FreeRoam; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FreeRoamActions set) { return set.Get(); }
        public void AddCallbacks(IFreeRoamActions instance)
        {
            if (instance == null || m_Wrapper.m_FreeRoamActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FreeRoamActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Test.started += instance.OnTest;
            @Test.performed += instance.OnTest;
            @Test.canceled += instance.OnTest;
            @PopUpMenu.started += instance.OnPopUpMenu;
            @PopUpMenu.performed += instance.OnPopUpMenu;
            @PopUpMenu.canceled += instance.OnPopUpMenu;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @ItemPickUp.started += instance.OnItemPickUp;
            @ItemPickUp.performed += instance.OnItemPickUp;
            @ItemPickUp.canceled += instance.OnItemPickUp;
        }

        private void UnregisterCallbacks(IFreeRoamActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Test.started -= instance.OnTest;
            @Test.performed -= instance.OnTest;
            @Test.canceled -= instance.OnTest;
            @PopUpMenu.started -= instance.OnPopUpMenu;
            @PopUpMenu.performed -= instance.OnPopUpMenu;
            @PopUpMenu.canceled -= instance.OnPopUpMenu;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @ItemPickUp.started -= instance.OnItemPickUp;
            @ItemPickUp.performed -= instance.OnItemPickUp;
            @ItemPickUp.canceled -= instance.OnItemPickUp;
        }

        public void RemoveCallbacks(IFreeRoamActions instance)
        {
            if (m_Wrapper.m_FreeRoamActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFreeRoamActions instance)
        {
            foreach (var item in m_Wrapper.m_FreeRoamActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FreeRoamActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FreeRoamActions @FreeRoam => new FreeRoamActions(this);

    // battleMode
    private readonly InputActionMap m_battleMode;
    private List<IBattleModeActions> m_BattleModeActionsCallbackInterfaces = new List<IBattleModeActions>();
    private readonly InputAction m_battleMode_PopUpMenu;
    private readonly InputAction m_battleMode_MouseLeftClick;
    private readonly InputAction m_battleMode_Movement;
    public struct BattleModeActions
    {
        private @PlayerInputAction m_Wrapper;
        public BattleModeActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @PopUpMenu => m_Wrapper.m_battleMode_PopUpMenu;
        public InputAction @MouseLeftClick => m_Wrapper.m_battleMode_MouseLeftClick;
        public InputAction @Movement => m_Wrapper.m_battleMode_Movement;
        public InputActionMap Get() { return m_Wrapper.m_battleMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleModeActions set) { return set.Get(); }
        public void AddCallbacks(IBattleModeActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleModeActionsCallbackInterfaces.Add(instance);
            @PopUpMenu.started += instance.OnPopUpMenu;
            @PopUpMenu.performed += instance.OnPopUpMenu;
            @PopUpMenu.canceled += instance.OnPopUpMenu;
            @MouseLeftClick.started += instance.OnMouseLeftClick;
            @MouseLeftClick.performed += instance.OnMouseLeftClick;
            @MouseLeftClick.canceled += instance.OnMouseLeftClick;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IBattleModeActions instance)
        {
            @PopUpMenu.started -= instance.OnPopUpMenu;
            @PopUpMenu.performed -= instance.OnPopUpMenu;
            @PopUpMenu.canceled -= instance.OnPopUpMenu;
            @MouseLeftClick.started -= instance.OnMouseLeftClick;
            @MouseLeftClick.performed -= instance.OnMouseLeftClick;
            @MouseLeftClick.canceled -= instance.OnMouseLeftClick;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IBattleModeActions instance)
        {
            if (m_Wrapper.m_BattleModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBattleModeActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BattleModeActions @battleMode => new BattleModeActions(this);

    // popMenu
    private readonly InputActionMap m_popMenu;
    private List<IPopMenuActions> m_PopMenuActionsCallbackInterfaces = new List<IPopMenuActions>();
    private readonly InputAction m_popMenu_MouseLeftClick;
    public struct PopMenuActions
    {
        private @PlayerInputAction m_Wrapper;
        public PopMenuActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseLeftClick => m_Wrapper.m_popMenu_MouseLeftClick;
        public InputActionMap Get() { return m_Wrapper.m_popMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PopMenuActions set) { return set.Get(); }
        public void AddCallbacks(IPopMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_PopMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PopMenuActionsCallbackInterfaces.Add(instance);
            @MouseLeftClick.started += instance.OnMouseLeftClick;
            @MouseLeftClick.performed += instance.OnMouseLeftClick;
            @MouseLeftClick.canceled += instance.OnMouseLeftClick;
        }

        private void UnregisterCallbacks(IPopMenuActions instance)
        {
            @MouseLeftClick.started -= instance.OnMouseLeftClick;
            @MouseLeftClick.performed -= instance.OnMouseLeftClick;
            @MouseLeftClick.canceled -= instance.OnMouseLeftClick;
        }

        public void RemoveCallbacks(IPopMenuActions instance)
        {
            if (m_Wrapper.m_PopMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPopMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_PopMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PopMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PopMenuActions @popMenu => new PopMenuActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    private readonly InputAction m_Menu_MouseLeftClick;
    public struct MenuActions
    {
        private @PlayerInputAction m_Wrapper;
        public MenuActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseLeftClick => m_Wrapper.m_Menu_MouseLeftClick;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
            @MouseLeftClick.started += instance.OnMouseLeftClick;
            @MouseLeftClick.performed += instance.OnMouseLeftClick;
            @MouseLeftClick.canceled += instance.OnMouseLeftClick;
        }

        private void UnregisterCallbacks(IMenuActions instance)
        {
            @MouseLeftClick.started -= instance.OnMouseLeftClick;
            @MouseLeftClick.performed -= instance.OnMouseLeftClick;
            @MouseLeftClick.canceled -= instance.OnMouseLeftClick;
        }

        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuActions @Menu => new MenuActions(this);

    // GameResult
    private readonly InputActionMap m_GameResult;
    private List<IGameResultActions> m_GameResultActionsCallbackInterfaces = new List<IGameResultActions>();
    private readonly InputAction m_GameResult_MouseLeftClick;
    public struct GameResultActions
    {
        private @PlayerInputAction m_Wrapper;
        public GameResultActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseLeftClick => m_Wrapper.m_GameResult_MouseLeftClick;
        public InputActionMap Get() { return m_Wrapper.m_GameResult; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameResultActions set) { return set.Get(); }
        public void AddCallbacks(IGameResultActions instance)
        {
            if (instance == null || m_Wrapper.m_GameResultActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameResultActionsCallbackInterfaces.Add(instance);
            @MouseLeftClick.started += instance.OnMouseLeftClick;
            @MouseLeftClick.performed += instance.OnMouseLeftClick;
            @MouseLeftClick.canceled += instance.OnMouseLeftClick;
        }

        private void UnregisterCallbacks(IGameResultActions instance)
        {
            @MouseLeftClick.started -= instance.OnMouseLeftClick;
            @MouseLeftClick.performed -= instance.OnMouseLeftClick;
            @MouseLeftClick.canceled -= instance.OnMouseLeftClick;
        }

        public void RemoveCallbacks(IGameResultActions instance)
        {
            if (m_Wrapper.m_GameResultActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameResultActions instance)
        {
            foreach (var item in m_Wrapper.m_GameResultActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameResultActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameResultActions @GameResult => new GameResultActions(this);
    public interface IFreeRoamActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnTest(InputAction.CallbackContext context);
        void OnPopUpMenu(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
        void OnItemPickUp(InputAction.CallbackContext context);
    }
    public interface IBattleModeActions
    {
        void OnPopUpMenu(InputAction.CallbackContext context);
        void OnMouseLeftClick(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IPopMenuActions
    {
        void OnMouseLeftClick(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnMouseLeftClick(InputAction.CallbackContext context);
    }
    public interface IGameResultActions
    {
        void OnMouseLeftClick(InputAction.CallbackContext context);
    }
}
